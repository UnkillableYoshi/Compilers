PARSER_BEGIN(EjExpresiones)
public class EjExpresiones {
static String [] arreglo=new String[20];
public static void main(String args[]) throws ParseException {
EjExpresiones parser = new EjExpresiones(System.in);
	parser.Inicial();
	System.out.println("Analisis exitoso");
}
}
PARSER_END(EjExpresiones)


SKIP :{" "| "\t"| "\n"| "\r"}


/*Definicion de tokens para analisis lexico*/

TOKEN :{
<OPSUM: "+"> |
<OPSUB: "-"> |
<OPMUL: "*"> |
<PABRE: "("> |
<PCIERRA: ")"> |
<NUMERO: (["0"-"9"])+>
}

SPECIAL_TOKEN:{<NOVALIDO:~[]> {System.out.println("Error lexico, caracter o token no valido en la linea: " + matchedToken.beginLine);}
}


/** Analisis Sintactico */

void Inicial() :{ }
{
(E())+ <EOF>
}

void E():{}
{
T()Ep() 
}

void Ep():{}
{
(LOOKAHEAD(3)PLUS()T()Ep())*
}

void PLUS():{}
{
<OPSUM> | <OPSUB>
}

void T():{}
{
F()Tp()
}

void Tp():{}
{
(LOOKAHEAD(3)MULT()F()Tp())*
}

void F():{}
{
<PABRE> E() <PCIERRA> | <NUMERO>
}

void MULT():{}
{
<OPMUL>
}