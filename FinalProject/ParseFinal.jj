options{
	IGNORE_CASE = true;
	STATIC = false;
	DEBUG_PARSER = false;
	DEBUG_LOOKAHEAD = false;
	DEBUG_TOKEN_MANAGER = false;
	SANITY_CHECK = true;
	UNICODE_INPUT = true;
}

PARSER_BEGIN(ParseFinal)
	import java.io.*;
	public class ParseFinal {
		public static void main(String args[]) throws ParseException {
			ParseFinal parser = new ParseFinal(System.in);
			parser.program();
			System.out.println("\n \n Tabla De Simbolos\n");	
			hasta_test.printHash();
		}
	}
PARSER_END(ParseFinal)


// TOKENS

TOKEN:
{
<ELSE: "else"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<IF: "if"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<INT: "int"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<FLOAT: "float"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<RETURN: "return"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<VOID: "void"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
|
<WHILE: "while"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Keyword: "+image);}
}

TOKEN:
{
<OPSUM: "+"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPSUB: "-"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMULTI: "*"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPDIV: "/"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMEN: "<"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMENEQ: "<="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMAY: ">"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPMAYEQ: ">="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<EQUIV: "=="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<NOEQ: "!="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<EQUAL: "="> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<PUNCOM: ";"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<COM: ","> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OPARENT: "("> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<CPARENT: ")"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<ORECT: "["> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<CRECT: "]"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<OLLAVE: "{"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
|
<CLLAVE: "}"> {System.out.println("Linea: "+matchedToken.beginLine+". "+"Symbol: "+image);}
}

TOKEN:
{
<ID: ["a"-"z","A"-"Z"] (["a"-"z","A"-"Z"])* > {System.out.println("Linea: "+matchedToken.beginLine+". "+"ID: "+image);}
|
<NUM: ["0"-"9"] (["0"-"9"])* | (["0"-"9"])+ "." (["0"-"9"])+> {System.out.println("Linea: "+matchedToken.beginLine+". "+"NUM: "+image);}
}


// SKIP SPECIAL_TOKEN

SKIP:
{
" " | "\t" | "\n" | "\r"
}

MORE:
{
"/*" : COMENTARIO
}

<COMENTARIO> MORE:
{
<~[]>
}

<COMENTARIO> SKIP:
{
"*/" : DEFAULT 
}

SKIP:
{
<~[]>{System.out.println("ERROR: CHARACTER NO VALIDO -> "+image);}
}

SPECIAL_TOKEN:
{
< "."(["0"-"9"])+ | (["0"-"9"])+"." >{System.out.println("ERROR: FLOTANTE NO VALIDO -> " + image + " <-" + " Linea: " + matchedToken.beginLine);}
|
< (["0"-"9"])+ ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z", "0"-"9"] )* >{System.out.println("ERROR: Identificador no puede comenzar con numero -> " + image + " <-" + " Linea: " + matchedToken.beginLine);}
|
<COMENTARIO_LINEA: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}


// Analisis Sintactico 

//1
void program(): { }
{
	declarationList() <EOF>
}

//2
void declarationList(): {}
{
	declaration() ( declaration() )*
}


//3
void declaration(): {}
{
	LOOKAHEAD(3)
	varDeclaration() | funDeclaration()
}

//4
void varDeclaration(): {
	String tipo;
	String idVar;
	String idArr;
}
{
	//var
	LOOKAHEAD(3)
	typeSpecifier() { tipo = token.image; }
	<ID> { idVar = token.image;}
	{hasta_test.addHash(idVar,tipo,"var");}
	<PUNCOM> 
	|
	//arr
	typeSpecifier() { tipo = token.image; }
	<ID> { idVar = token.image;}
	<ORECT> <NUM> <CRECT>
	{hasta_test.addHash(idVar,tipo,"arr");}
	<PUNCOM>
}

//5
void typeSpecifier(): {}
{
	<INT> | <VOID> | <FLOAT> 
}

//6
void funDeclaration(): {
	String tipo;
	Token id;
}
{
	typeSpecifier() { tipo = token.image; }
	id = <ID>  {hasta_test.addHash(id.image,tipo,"fun");}
	<OPARENT> params() <CPARENT> compoundStmt()
}

//7
void params(): {}
{
	LOOKAHEAD(2)
	paramList() | <VOID>
}

//8
void paramList(): {}
{
	param() ( <COM> param() )*
}

//9
void param(): {
	String tipo;
	String idVarFun;
	String idArrFun;
}
{
	LOOKAHEAD(3)
	typeSpecifier() { tipo = token.image; }
	<ID> { idArrFun = token.image;}
	<ORECT> <CRECT> 
	{hasta_test.addHash(idArrFun,tipo,"arr-fun");}
	| 
	typeSpecifier() { tipo = token.image; }
	<ID> { idVarFun = token.image;}
	{hasta_test.addHash(idVarFun,tipo,"var-fun");}
}

//10
void compoundStmt():{}
{
	<OLLAVE> localDeclaration() statementList() <CLLAVE>
}

//11
void localDeclaration(): {}
{
	( varDeclaration() )*
} 

//12
void statementList(): {}
{
	( statement() )*
}

//13
void statement(): {}
{
	LOOKAHEAD(var())
	expressionStmt() | compoundStmt() | selectionStmt() | iterationStmt() | returnStmt()
}

//14
void expressionStmt(): {}
{
	expression() <PUNCOM> | <PUNCOM>
}

//15
void selectionStmt(): {}
{
	<IF> <OPARENT> expression() <CPARENT> statement()  [ LOOKAHEAD(3) <ELSE> statement() ]
}

//16
void iterationStmt(): {}
{
	<WHILE> <OPARENT> expression() <CPARENT> statement()
}

//17
void returnStmt(): {}
{
	<RETURN> [ expression() ] <PUNCOM>
}

//18
void expression(): {}
{
	LOOKAHEAD(var() <EQUAL>)
	var() <EQUAL> expression() | simpleExpression()
}

//19
void var(): {}
{
	LOOKAHEAD(<ID> <ORECT>)
	<ID> <ORECT> expression() <CRECT> | <ID>
}

//20
void simpleExpression(): {}
{
	LOOKAHEAD(additiveExpression() relop())
	additiveExpression() relop() additiveExpression() | additiveExpression()
}

//21
void relop(): {}
{
	<OPMENEQ> | <OPMEN> | <OPMAY> | <OPMAYEQ> | <EQUIV> | <NOEQ>
}

//22
void additiveExpression(): {}
{
	term() ( addop() term() )*
}

//23
void addop(): {}
{
	<OPSUM> | <OPSUB>
}

//24
void term(): {}
{
	factor() ( mulop() factor() )*
}

//25
void mulop(): {}
{
	<OPMULTI> | <OPDIV>
}

//26
void factor(): {}
{
	LOOKAHEAD(<ID> <OPARENT>)
	call() | var() | <OPARENT> expression() <CPARENT> | <NUM>
}

//27
void call(): {}
{
	LOOKAHEAD(<ID> <OPARENT> <CPARENT>)
	<ID> <OPARENT> <CPARENT> | <ID> <OPARENT> argsList() <CPARENT>
}

//29
void argsList(): {}
{
	expression() ( <COM> expression() )*
}
